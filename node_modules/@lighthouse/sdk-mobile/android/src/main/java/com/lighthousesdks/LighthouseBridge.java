package com.lighthousesdks;


import android.Manifest;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.pm.PackageManager;
import android.os.Build;
import android.os.RemoteException;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.modules.core.DeviceEventManagerModule;

import org.altbeacon.beacon.Beacon;
import org.altbeacon.beacon.BeaconConsumer;
import org.altbeacon.beacon.BeaconManager;
import org.altbeacon.beacon.BeaconParser;
import org.altbeacon.beacon.Identifier;
import org.altbeacon.beacon.MonitorNotifier;
import org.altbeacon.beacon.RangeNotifier;
import org.altbeacon.beacon.Region;

import java.util.Collection;

/**
 * Created by paulbao on 13/05/2016.
 */
public class LighthouseBridge extends ReactContextBaseJavaModule implements BeaconConsumer {
    public static final int PERMISSION_REQUEST_COARSE_LOCATION = 1;
    private boolean mIsBound = false;
    private BeaconManager beaconManager;
    public LighthouseBridge(ReactApplicationContext reactContext) {
        super(reactContext);
        beaconManager = BeaconManager.getInstanceForApplication(this.getReactApplicationContext());

        beaconManager.setRegionExitPeriod(45000l);
        // Ibeacon
        beaconManager.getBeaconParsers().add(new BeaconParser().
                setBeaconLayout("m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24"));

        beaconManager.bind(this);
    }

    @Override
    public String getName() {
        return "LighthouseBridge";
    }
    @ReactMethod
    public void requestPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (getCurrentActivity().checkSelfPermission(Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                final AlertDialog.Builder builder = new AlertDialog.Builder(getCurrentActivity());
                builder.setTitle("This app need location access");
                builder.setMessage("Please grant location access so this app can detect beacons.");
                builder.setPositiveButton(android.R.string.ok, null);
                builder.setOnDismissListener(new DialogInterface.OnDismissListener() {
                    @Override
                    public void onDismiss(DialogInterface dialog) {
                        getCurrentActivity().requestPermissions(new String[]{Manifest.permission.ACCESS_COARSE_LOCATION}, PERMISSION_REQUEST_COARSE_LOCATION);
                    }
                });
                builder.show();
            }
        }
    }

   @ReactMethod
   public void requestStateForRegion(ReadableMap map) {
       try {
           beaconManager.startMonitoringBeaconsInRegion(convertMapToRegion(map));
       } catch (RemoteException e) {
           e.printStackTrace();
       }
   }

    @ReactMethod
    public void stopCurrentRangingRegions() {
        try {
            for (Region region : beaconManager.getRangedRegions()) {
                beaconManager.stopRangingBeaconsInRegion(region);
            }
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    @ReactMethod
    public void stopCurrentMonitoringRegions() {
        try {
            for (Region region : beaconManager.getMonitoredRegions()) {
                beaconManager.stopMonitoringBeaconsInRegion(region);
            }
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    @ReactMethod
    public void startMonitoringForRegion(ReadableMap map) {
        try {
            beaconManager.startMonitoringBeaconsInRegion(convertMapToRegion(map));
        } catch (RemoteException e) {
            e.printStackTrace();
        }
    }

    @ReactMethod
    public void startRangingBeaconsInRegion(ReadableMap map) {
        try {
            beaconManager.startRangingBeaconsInRegion(convertMapToRegion(map));
        } catch (RemoteException e) {    }
    }

    @ReactMethod
    public void stopMonitoringForRegion(ReadableMap map) {
        try {
            beaconManager.stopMonitoringBeaconsInRegion(convertMapToRegion(map));
        } catch (RemoteException e) {    }
    }

    @ReactMethod
    public void stopRangingBeaconsInRegion(ReadableMap map) {
        try {
            beaconManager.stopRangingBeaconsInRegion(convertMapToRegion(map));
        } catch (RemoteException e) {    }
    }

    private String formatDistance(Double distance){
        return String.format( "%.2f", distance );
    }

    @Override
    public void onBeaconServiceConnect() {
        mIsBound = true;

        beaconManager.setMonitorNotifier(new MonitorNotifier() {
            @Override
            public void didEnterRegion(Region region) {
                getReactApplicationContext()
                        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit("didEnterRegion", convertRegionToMap(region));
            }

            @Override
            public void didExitRegion(Region region) {
                getReactApplicationContext()
                        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit("didExitRegion", convertRegionToMap(region));
            }

            @Override
            public void didDetermineStateForRegion(int i, Region region) {
                String state;
                switch (i) {
                    case MonitorNotifier.INSIDE:
                        state = "inside";
                        break;
                    case MonitorNotifier.OUTSIDE:
                        state = "outside";
                        break;
                    default:
                        state = "unknown";
                        break;
                }
                WritableMap regionMap = Arguments.createMap();
                regionMap.putString("identifier",region.getUniqueId());
                regionMap.putString("uuid",region.getId1().toString());
                WritableMap eventMap = Arguments.createMap();
                eventMap.putMap("region", regionMap);
                eventMap.putString("state", state);

                getReactApplicationContext()
                        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit("didDetermineState", eventMap);
            }
        });

        beaconManager.setRangeNotifier(new RangeNotifier() {
            @Override
            public void didRangeBeaconsInRegion(Collection<Beacon> beacons, Region region) {
                if(beacons.size() == 0){
                    return;
                }
                WritableMap event = Arguments.createMap();
                WritableArray beaconArray = Arguments.createArray();
                for (Beacon beacon : beacons) {
                    beaconArray.pushMap(convertBeacon(beacon));
                }

                event.putArray("beacons",beaconArray);
                event.putMap("region", convertRegionToMap(region));

                getReactApplicationContext()
                        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit("didRangeBeacons", event);
            }
        });
    }

    @Override
    public Context getApplicationContext() {
        return this.getReactApplicationContext();
    }

    @Override
    public void unbindService(ServiceConnection serviceConnection) {
        getReactApplicationContext().unbindService(serviceConnection);
        mIsBound = false;
    }

    @Override
    public boolean bindService(Intent intent, ServiceConnection serviceConnection, int i) {
        getReactApplicationContext().bindService(intent, serviceConnection, i);
        return false;
    }

    private WritableMap convertBeacon(Beacon beacon) {
        String key = String.format("%s-%s-%s", beacon.getId1(),
                beacon.getId2(), beacon.getId3());
        WritableMap params = Arguments.createMap();
        params.putString("key", key);
        params.putString("uuid", beacon.getId1().toString().toUpperCase());
        params.putString("major", beacon.getId2().toString());
        params.putString("minor", beacon.getId3().toString());
        params.putDouble("accuracy", beacon.getDistance());
        params.putString("distance", formatDistance(beacon.getDistance()));
        params.putInt("rssi", beacon.getRssi());
        params.putInt("txPower", beacon.getTxPower());

        return params;
    }

    private Region convertMapToRegion(ReadableMap map) {
        try {
            if (!map.hasKey("minor")) {
                if (!map.hasKey("major")) {
                    return new Region(map.getString("identifier"), Identifier.parse(map.getString("uuid")), null, null);
                } else {
                    return new Region(map.getString("identifier"), Identifier.parse(map.getString("uuid")),
                            Identifier.parse(String.valueOf(map.getInt("major"))), null);
                }
            } else {
                return new Region(map.getString("identifier"), Identifier.parse(map.getString("uuid")),
                        Identifier.parse(String.valueOf(map.getInt("major"))),
                        Identifier.parse(String.valueOf(map.getInt("minor"))));
            }
        } catch (Exception ex) {
            return null;
        }

    }

    private WritableMap convertRegionToMap(Region region) {
        WritableMap regionMap = Arguments.createMap();
        regionMap.putString("identifier",region.getUniqueId());
        regionMap.putString("uuid",region.getId1().toString());
        if (region.getId2() != null) {
            regionMap.putString("major",region.getId2().toString());
        }

        if (region.getId3() != null) {
            regionMap.putString("minor",region.getId3().toString());
        }
        return regionMap;
    }
}
